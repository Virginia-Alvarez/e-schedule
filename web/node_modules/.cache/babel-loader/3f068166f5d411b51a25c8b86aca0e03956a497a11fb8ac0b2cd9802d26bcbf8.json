{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useNavigate } from 'react-router-dom';\nimport ls from '../services/localstorage';\nfunction IsUserAuthenticated() {\n  _s();\n  const navigate = useNavigate();\n  const doctor = ls.get('doctor');\n  let auth = () => {\n    return doctor;\n  };\n  if (!doctor) {\n    auth = function () {\n      let redirectUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/login';\n      return navigate(redirectUrl);\n    };\n  }\n  return auth;\n}\n_s(IsUserAuthenticated, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = IsUserAuthenticated;\nexport default IsUserAuthenticated;\nfunction calculateIntervalDays(fromDate) {\n  let toDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '10/03/2023';\n  toSplittedDate = toDate.split('/');\n  to = new Date(toSplittedDate[2], parseInt(toSplittedDate[1]) - 1, toSplittedDate[0]);\n  fromSplittedDate = fromDate.split('/');\n  from = new Date(fromSplittedDate[2], parseInt(fromSplittedDate[1]) - 1, fromSplittedDate[0]);\n  return Math.floor((to - from) / 1000 / 60 / 60 / 24);\n}\nfunction removeVocalsAndSpaces(name) {\n  return name.replace(/[aeiou ]/gi, '');\n}\nfunction handleInputName(event) {\n  result = removeVocalsAndSpaces(event.currentTarget.value);\n  resultName.value = result;\n}\nfunction handleInputDate(event) {\n  result = calculateIntervalDays(event.currentTarget.value);\n  resultDate.value = result;\n}\n\n// PUT THE INPUTS LISTENERS HERE\ninputName = document.querySelector('#name');\ninputDate = document.querySelector('#date');\nresultName = document.querySelector('#nameWithoutVocals');\nresultDate = document.querySelector('#days');\ninputName.addEventListener('blur', handleInputName);\ninputDate.addEventListener('blur', handleInputDate);\nvar _c;\n$RefreshReg$(_c, \"IsUserAuthenticated\");","map":{"version":3,"names":["useNavigate","ls","IsUserAuthenticated","navigate","doctor","get","auth","redirectUrl","calculateIntervalDays","fromDate","toDate","toSplittedDate","split","to","Date","parseInt","fromSplittedDate","from","Math","floor","removeVocalsAndSpaces","name","replace","handleInputName","event","result","currentTarget","value","resultName","handleInputDate","resultDate","inputName","document","querySelector","inputDate","addEventListener"],"sources":["/Users/vir/proyectos-personales/e-schedule/web/src/hooks/IsUserAuthenticated.js"],"sourcesContent":["import {useNavigate} from 'react-router-dom';\nimport ls from '../services/localstorage';\n\nfunction IsUserAuthenticated() {\n    const navigate = useNavigate();\n    const doctor =ls.get('doctor');\n    let auth = () => { return doctor };\n    if(!doctor){\n        auth =  (redirectUrl = '/login') => navigate(redirectUrl);\n    }\n\n    return auth;\n}\n\nexport default IsUserAuthenticated;\n\nfunction calculateIntervalDays(fromDate, toDate = '10/03/2023') {\n    toSplittedDate = toDate.split('/');\n    to = new Date(toSplittedDate[2],parseInt(toSplittedDate[1])-1,toSplittedDate[0]);\n    \n    fromSplittedDate = fromDate.split('/');\n    from = new Date(fromSplittedDate[2],parseInt(fromSplittedDate[1])-1,fromSplittedDate[0]);\n    \n    return Math.floor(((((to - from) / 1000)/60)/60)/24);\n  }\n  \n  function removeVocalsAndSpaces(name) {\n    return name.replace(/[aeiou ]/gi, '');\n  }\n  \n  function handleInputName(event) {\n    result = removeVocalsAndSpaces(event.currentTarget.value);\n    resultName.value = result;\n  }\n  \n  function handleInputDate(event) {\n    result = calculateIntervalDays(event.currentTarget.value);\n    resultDate.value = result;\n  }\n  \n  // PUT THE INPUTS LISTENERS HERE\n  inputName = document.querySelector('#name');\n  inputDate = document.querySelector('#date');\n  resultName = document.querySelector('#nameWithoutVocals');\n  resultDate = document.querySelector('#days')\n  \n  inputName.addEventListener('blur', handleInputName);\n  inputDate.addEventListener('blur', handleInputDate);"],"mappings":";AAAA,SAAQA,WAAW,QAAO,kBAAkB;AAC5C,OAAOC,EAAE,MAAM,0BAA0B;AAEzC,SAASC,mBAAmB,GAAG;EAAA;EAC3B,MAAMC,QAAQ,GAAGH,WAAW,EAAE;EAC9B,MAAMI,MAAM,GAAEH,EAAE,CAACI,GAAG,CAAC,QAAQ,CAAC;EAC9B,IAAIC,IAAI,GAAG,MAAM;IAAE,OAAOF,MAAM;EAAC,CAAC;EAClC,IAAG,CAACA,MAAM,EAAC;IACPE,IAAI,GAAI;MAAA,IAACC,WAAW,uEAAG,QAAQ;MAAA,OAAKJ,QAAQ,CAACI,WAAW,CAAC;IAAA;EAC7D;EAEA,OAAOD,IAAI;AACf;AAAC,GATQJ,mBAAmB;EAAA,QACPF,WAAW;AAAA;AAAA,KADvBE,mBAAmB;AAW5B,eAAeA,mBAAmB;AAElC,SAASM,qBAAqB,CAACC,QAAQ,EAAyB;EAAA,IAAvBC,MAAM,uEAAG,YAAY;EAC1DC,cAAc,GAAGD,MAAM,CAACE,KAAK,CAAC,GAAG,CAAC;EAClCC,EAAE,GAAG,IAAIC,IAAI,CAACH,cAAc,CAAC,CAAC,CAAC,EAACI,QAAQ,CAACJ,cAAc,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,EAACA,cAAc,CAAC,CAAC,CAAC,CAAC;EAEhFK,gBAAgB,GAAGP,QAAQ,CAACG,KAAK,CAAC,GAAG,CAAC;EACtCK,IAAI,GAAG,IAAIH,IAAI,CAACE,gBAAgB,CAAC,CAAC,CAAC,EAACD,QAAQ,CAACC,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,EAACA,gBAAgB,CAAC,CAAC,CAAC,CAAC;EAExF,OAAOE,IAAI,CAACC,KAAK,CAAI,CAACN,EAAE,GAAGI,IAAI,IAAI,IAAI,GAAE,EAAE,GAAE,EAAE,GAAE,EAAE,CAAC;AACtD;AAEA,SAASG,qBAAqB,CAACC,IAAI,EAAE;EACnC,OAAOA,IAAI,CAACC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC;AACvC;AAEA,SAASC,eAAe,CAACC,KAAK,EAAE;EAC9BC,MAAM,GAAGL,qBAAqB,CAACI,KAAK,CAACE,aAAa,CAACC,KAAK,CAAC;EACzDC,UAAU,CAACD,KAAK,GAAGF,MAAM;AAC3B;AAEA,SAASI,eAAe,CAACL,KAAK,EAAE;EAC9BC,MAAM,GAAGjB,qBAAqB,CAACgB,KAAK,CAACE,aAAa,CAACC,KAAK,CAAC;EACzDG,UAAU,CAACH,KAAK,GAAGF,MAAM;AAC3B;;AAEA;AACAM,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;AAC3CC,SAAS,GAAGF,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;AAC3CL,UAAU,GAAGI,QAAQ,CAACC,aAAa,CAAC,oBAAoB,CAAC;AACzDH,UAAU,GAAGE,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;AAE5CF,SAAS,CAACI,gBAAgB,CAAC,MAAM,EAAEZ,eAAe,CAAC;AACnDW,SAAS,CAACC,gBAAgB,CAAC,MAAM,EAAEN,eAAe,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}